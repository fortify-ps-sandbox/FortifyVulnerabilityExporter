/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.from.ssc;

import java.util.stream.Stream;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fortify.client.ssc.api.SSCApplicationVersionAPI;
import com.fortify.client.ssc.api.SSCIssueAPI;
import com.fortify.client.ssc.api.json.embed.SSCEmbedConfig;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionIssuesQueryBuilder;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionIssuesQueryBuilder.QueryMode;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionsQueryBuilder;
import com.fortify.client.ssc.connection.SSCAuthenticatingRestConnection;
import com.fortify.util.applier.ifblank.IfBlank;
import com.fortify.util.rest.json.JSONList;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithOnDemandSpEL;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithValue;
import com.fortify.util.rest.json.preprocessor.filter.AbstractJSONMapFilter.MatchMode;
import com.fortify.util.rest.json.preprocessor.filter.JSONMapFilterRegEx;
import com.fortify.util.rest.query.PagingData;
import com.fortify.vulnexport.api.filter.QueryBuilderFilterHelper;
import com.fortify.vulnexport.api.vuln.StandardVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.StandardVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoader;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.from.ssc.FromSSCVulnerabilityLoaderConfig.SSCVersionConfig;
import com.fortify.vulnexport.from.ssc.FromSSCVulnerabilityLoaderConfig.SSCVulnerabilityConfig;
import com.fortify.vulnexport.spi.source.vuln.loader.AbstractVulnerabilityLoader;

import lombok.RequiredArgsConstructor;

/**
 * {@link IVulnerabilityLoader} implementation for loading vulnerability data from FoD.
 * 
 * @author Ruud Senden
 */
@RequiredArgsConstructor
public class FromSSCVulnerabilityLoader extends AbstractVulnerabilityLoader {
	public static final String PLUGINNAME = FromSSCVulnerabilityLoaderFactory.PLUGINNAME;
	private static final Logger LOG = LoggerFactory.getLogger(FromSSCVulnerabilityLoader.class);
	private final FromSSCVulnerabilityLoaderConfig config;
	private final IVulnerabilityLoaderContext loaderContext;

	/**
	 * This method uses a try-with-resources block to create and close an 
	 * {@link SSCAuthenticatingRestConnection} instance, which is used to
	 * initialize and run a new {@link _FromSSCVulnerabilityLoader} instance
	 * to perform the actual work.
	 */
	@Override
	public void run() {
		try ( SSCAuthenticatingRestConnection conn = new SSCAuthenticatingRestConnection(config) ) {
			new _FromSSCVulnerabilityLoader(config, loaderContext, conn).run();
		}
	}
	
	/**
	 * This inner class is responsible for loading vulnerability data from SSC. It stores the
	 * configuration, loader context and connection as instance variables for easy access by
	 * each of the methods.
	 */
	@RequiredArgsConstructor
	private static final class _FromSSCVulnerabilityLoader {
		private final FromSSCVulnerabilityLoaderConfig config;
		private final IVulnerabilityLoaderContext loaderContext;
		private final SSCAuthenticatingRestConnection conn;
		
		/**
		 * Load application versions from SSC and invoke the {@link #processVulnerabilities(JSONMap)} 
		 * method to process the vulnerability data for each individual application version. 
		 * The {@link #configureApplicationVersionsQueryBuilder(SSCApplicationVersionsQueryBuilder)} method defines which
		 * application versions actually get loaded/processed.
		 */
		public void run() {
			SSCApplicationVersionsQueryBuilder qb = conn.api(SSCApplicationVersionAPI.class).queryApplicationVersions();
			configureApplicationVersionsQueryBuilder(qb);
			qb.build().processAll(this::processVulnerabilities);
		}
		
		/**
		 * Configure the given {@link SSCApplicationVersionsQueryBuilder} based on configuration data
		 * like filtering criteria, additional data to be embedded, ...
		 * @param qb {@link SSCApplicationVersionsQueryBuilder} to be configured
		 */
		private void configureApplicationVersionsQueryBuilder(SSCApplicationVersionsQueryBuilder qb) {
			qb.preProcessor(new JSONMapEnrichWithOnDemandSpEL("applicationAndVersionName", "project.name+':'+name", String.class, true));
			SSCVersionConfig sSCVersionConfig = config.getVersion();
			if ( sSCVersionConfig!=null ) {
				qb.id(IfBlank.SKIP(), sSCVersionConfig.getId());
				qb.applicationAndOrVersionName(IfBlank.SKIP(), sSCVersionConfig.getName());
				if ( StringUtils.isNotBlank(sSCVersionConfig.getRegex()) ) {
					qb.preProcessor(new JSONMapFilterRegEx(MatchMode.INCLUDE, "applicationAndVersionName", sSCVersionConfig.getRegex()));
				}
				qb.paramOrderBy(IfBlank.SKIP(), sSCVersionConfig.getOrderBy());
				if ( sSCVersionConfig.getEmbed()!=null ) {
					Stream.of(sSCVersionConfig.getEmbed()).forEach(c->embed(qb,c));
				}
				QueryBuilderFilterHelper.addFilter(qb, sSCVersionConfig.getFilter());
			}
		}
		
		/**
		 * Add entities to be embedded to the given {@link SSCApplicationVersionsQueryBuilder}
		 * based on the given {@link SSCEmbedConfig}. This method adds support for sub-entities
		 * <code>currentStaticScan</code>, <code>currentDynamicScan</code> and 
		 * <code>currentSonatypeScan</code>.
		 * @param qb {@link SSCApplicationVersionsQueryBuilder} to be configured
		 * @param config {@link SSCEmbedConfig} describing the entity to be embedded
		 */
		private void embed(SSCApplicationVersionsQueryBuilder qb, SSCEmbedConfig config) {
			if ( config.getSubEntity()!=null ) {
				switch (config.getSubEntity()) {
				case "currentStaticScan":
					embedCurrentScan(qb, config, "currentStaticScanId", "SCA"); return;
				case "currentDynamicScan":
					embedCurrentScan(qb, config, "currentDynamicScanId", "WEBINSPECT"); return;
				case "currentSonatypeScan":
					embedCurrentScan(qb, config, "currentSonatypeScanId", "SONATYPE"); return;
				}
			}
			qb.embed(config);
		}
		
		/**
		 * Add current scan entity to be embedded to the given {@link SSCApplicationVersionsQueryBuilder}.
		 * This will actually embed two entities:
		 * <ul>
		 *  <li>The last scan id for the given scan type, by querying the application version issues</li>
		 *  <li>The actual scan data, based on the last scan id found above</li>
		 * </ul>
		 * @param qb {@link SSCApplicationVersionsQueryBuilder} to be configured
		 * @param config {@link SSCEmbedConfig} describing the entity to be embedded
		 * @param lastScanIdPropertyName The property name under which to store the last scan id
		 * @param scanEngineType Scan engine type for the scan to be embedded
		 */
		private void embedCurrentScan(SSCApplicationVersionsQueryBuilder qb, SSCEmbedConfig config, String lastScanIdPropertyName, String scanEngineType) {
			qb.embed(SSCEmbedConfig.builder()
				.embedIf(config.getEmbedIf())
				.embedType(config.getEmbedType())
				.onError(config.getOnError())
				//.params(params)
				.propertyName(lastScanIdPropertyName)
				.resultExpression(config.getResultExpression()+".getOrNull(0)?.lastScanId")
				.uri("/api/v1/projectVersions/${id}/issues?start=0&limit=1&orderby=lastScanId&fields=lastScanId&showhidden=false&showremoved=false&showsuppressed=false&showshortfilenames=false&filter=ISSUE%5B11111111-1111-1111-1111-111111111151%5D%3A"+scanEngineType)
				.build()
			);
			qb.embed(SSCEmbedConfig.builder()
				.embedIf(lastScanIdPropertyName+"!=null")
				.embedType(config.getEmbedType())
				.onError(config.getOnError())
				.params(config.getParams())
				.propertyName(config.getPropertyName())
				.uri("/api/v1/scans/${"+lastScanIdPropertyName+"}")
				.build());
		}
		
		
		/**
		 * Process the vulnerabilities for the given SSC application version, using the following approach:
		 * <ul>
		 *  <li>Create and initialize a new {@link StandardVulnerabilityConsumerContext} instance,
		 *      making the current application version available as a context object</li>
		 *  <li>Call {@link IVulnerabilityLoaderContext#createVulnerabilityConsumer(com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext)} 
		 *      to create an {@link IVulnerabilityConsumer} instance (if available)</li>
		 *  <li>Create and configure an {@link SSCApplicationVersionIssuesQueryBuilder} instance for 
		 *      loading vulnerability data</li>
		 *  <li>Invoke the {@link IVulnerabilityConsumer#accept(com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor)}
		 *      method for each vulnerability</li>
		 * </ul>
		 * @param version from which to load vulnerability data
		 */
		private void processVulnerabilities(JSONMap version) {
			LOG.info("Processing Application version: {}", version.get("applicationAndVersionName", String.class));
			LOG.trace("Application version JSON: {}", version);
			StandardVulnerabilityConsumerContext consumerContext = new StandardVulnerabilityConsumerContext(PLUGINNAME, loaderContext);
			consumerContext.addContextObject("applicationVersion", version);
			try ( IVulnerabilityConsumer consumer = loaderContext.createVulnerabilityConsumer(consumerContext) ) {
				if ( checkConsumer(version, consumer) ) {
					SSCApplicationVersionIssuesQueryBuilder qb = conn.api(SSCIssueAPI.class)
						.queryIssues(version.get("id", String.class));
					configureApplicationVersionIssuesQueryBuilder(qb, version);
					qb.build().processAll(StandardVulnerabilityAccessor.asJSONMapConsumer(consumerContext, consumer));
				}
			}
		}
		
		/**
		 * Configure the given {@link SSCApplicationVersionIssuesQueryBuilder} based on configuration data
		 * like filtering criteria, additional data to be embedded, ...
		 * @param qb {@link SSCApplicationVersionIssuesQueryBuilder} to be configured
		 * @param version from which to load vulnerability data
		 */
		private void configureApplicationVersionIssuesQueryBuilder(SSCApplicationVersionIssuesQueryBuilder qb, JSONMap version) {
			qb.preProcessor(new JSONMapEnrichWithValue("applicationVersion", version));
			qb.pagePostProcessor(this::logPagingData);
			SSCVulnerabilityConfig vulnConfig = config.getVulnerability();
			if ( vulnConfig!=null ) {
				qb.paramFilterSetId(IfBlank.SKIP(), vulnConfig.getFilterSetId());
				qb.paramShowHidden(vulnConfig.isIncludeAll() || vulnConfig.isIncludeHidden());
				qb.paramShowRemoved(vulnConfig.isIncludeAll() || vulnConfig.isIncludeRemoved());
				qb.paramShowSuppressed(vulnConfig.isIncludeAll() || vulnConfig.isIncludeSuppressed());
				qb.paramFilter(IfBlank.SKIP(), vulnConfig.getFilterParam());
				qb.paramQ(IfBlank.SKIP(), vulnConfig.getQueryParam());
				qb.paramQm(IfBlank.SKIP(), QueryMode.issues);
				qb.paramOrderBy(IfBlank.SKIP(), vulnConfig.getOrderBy());
				if ( vulnConfig.getEmbed()!=null ) {
					Stream.of(vulnConfig.getEmbed()).forEach(qb::embed);
				}
				QueryBuilderFilterHelper.addFilter(qb, vulnConfig.getFilter());
			}
		}
		
		/**
		 * This method logs progress information after loading each individual page of vulnerability data
		 * @param pagingData describing the current progress
		 * @param jsonList containing the vulnerability data for the current page (not used)
		 */
		private final void logPagingData(PagingData pagingData, JSONList jsonList) {
			LOG.info(String.format("Processed %d of %d vulnerabilities", 
				pagingData.getProcessedTotalBeforeFilters(), pagingData.getTotalAvailable()));
		}

		/**
		 * This method logs an informational message if no consumer is available
		 * @param version currently being processed
		 * @param consumer to be checked
		 * @return false if given consumer is null, true otherwise
		 */
		private boolean checkConsumer(JSONMap version, IVulnerabilityConsumer consumer) {
			if ( consumer==null ) {
				LOG.info("No plugin available to process SSC vulnerabilities for application version {}", version.get("applicationAndVersionName"));
				return false;
			}
			return true;
		}
	}
}
