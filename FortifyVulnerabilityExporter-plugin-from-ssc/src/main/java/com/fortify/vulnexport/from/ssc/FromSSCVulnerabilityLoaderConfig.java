/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.from.ssc;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang.StringUtils;
import org.hibernate.validator.constraints.ScriptAssert;
import org.springframework.validation.annotation.Validated;

import com.fortify.client.ssc.api.json.embed.SSCApplicationVersionEmbedConfig;
import com.fortify.client.ssc.api.json.embed.SSCApplicationVersionIssuesEmbedConfig;
import com.fortify.client.ssc.api.query.builder.SSCOrderBy;
import com.fortify.client.ssc.connection.SSCRestConnectionConfig;
import com.fortify.vulnexport.api.filter.FilterConfig;
import com.fortify.vulnexport.api.filter.IConfigWithFilter;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Configuration class for {@link FromSSCVulnerabilityLoader}. This class extends from
 * {@link SSCRestConnectionConfig} to allow SSC connection details to be configured. 
 * 
 * @author Ruud Senden
 */
@Validated
@Data @EqualsAndHashCode(callSuper=true)
public class FromSSCVulnerabilityLoaderConfig extends SSCRestConnectionConfig<FromSSCVulnerabilityLoaderConfig> {
	/**
	 * This constructor sets the default token description to be used for the connection with SSC
	 */
	public FromSSCVulnerabilityLoaderConfig() {
		setTokenDescription("FortifyVulnerabilityExporter access token");
	}
	
	private @NotNull @Valid SSCVersionConfig version;
	private @Valid SSCVulnerabilityConfig vulnerability;
	
	/**
	 * Alias for {@link #setVulnerability(SSCVulnerabilityConfig)}
	 * @param vulnConfig {@link SSCVulnerabilityConfig} instance
	 */
	public void setVuln(SSCVulnerabilityConfig vulnConfig) {
		setVulnerability(vulnConfig);
	}
	
	/**
	 * Configuration for loading application versions from SSC
	 */
	@Data
	@ScriptAssert(script = "_this.hasApplicationVersionFilter()", lang = "javascript", message="Application version id, name or regex must be configured")
	public static final class SSCVersionConfig implements IConfigWithFilter {
		private String name;
		private String regex;
		private String id;
		private FilterConfig filter;
		private SSCOrderBy orderBy;
		private VersionEmbedConfig[] embed;
		
		public boolean hasApplicationVersionFilter() {
			return StringUtils.isNotBlank(name) || StringUtils.isNotBlank(regex) || StringUtils.isNotBlank(id);
		}
	}
	
	/**
	 * Configuration for loading vulnerability data from SSC
	 */
	@Data
	public static final class SSCVulnerabilityConfig implements IConfigWithFilter {
		// TODO private String filterSetName;
		private String filterSetId;
		private String queryParam;
		private String filterParam;
		private boolean includeHidden = false;
		private boolean includeRemoved = false;
		private boolean includeSuppressed = false;
		private boolean includeAll = false;
		private FilterConfig filter;
		private SSCOrderBy orderBy;
		private VulnerabilityEmbedConfig[] embed;
	}
	
	/**
	 * Configuration for embedding SSC application version entities
	 */
	public static final class VersionEmbedConfig extends SSCApplicationVersionEmbedConfig {
		private static final long serialVersionUID = 1L;
		
		@Override
		public void setUri(String uri) {
			super.setUri(transformUriExpressions(uri));
		}
	}
	
	/**
	 * Configuration for embedding SSC vulnerability entities
	 */
	public static final class VulnerabilityEmbedConfig extends SSCApplicationVersionIssuesEmbedConfig {
		private static final long serialVersionUID = 1L;

		@Override
		public void setUri(String uri) {
			super.setUri(transformUriExpressions(uri));
		}
	}
	
	/**
	 * Transform the given uri expression, allowing to use {x} expressions rather than ${x}
	 * to avoid any conflicts with property placeholders
	 * @param uri to be transformed
	 * @return transformed uri
	 */
	private static final String transformUriExpressions(String uri) {
		return uri.replaceAll("\\{([\\S]+)\\}", "\\${$1}");
	}
}
