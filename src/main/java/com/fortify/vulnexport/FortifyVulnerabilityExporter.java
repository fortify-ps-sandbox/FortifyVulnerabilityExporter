package com.fortify.vulnexport;

import java.io.IOException;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;

import com.fortify.util.spring.boot.container.PopulateContainerDirs;
import com.fortify.util.spring.boot.scheduler.RunOrSchedule;
import com.fortify.util.spring.environment.FortifyEnvironment;
import com.fortify.util.spring.expression.helper.DefaultExpressionHelper;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderFactory;

/**
 * This class contains the {@link #main(String[])} method for starting FortifyVulnerabilityExporter.
 * It utilizes Spring Boot functionality together with functionality provided by the {@link RunOrSchedule}
 * class to start the application. Based on the configuration provided by {@link FortifyVulnerabilityExporterRunnerConfig}
 * and the optional <code>runOnce</code> property, the {@link FortifyVulnerabilityExporterRunnerFactory#runActiveVulnerabilityLoader()} 
 * method will be invoked either once (exiting afterwards), or on a scheduled basis. This method in turn will load
 * all available {@link IVulnerabilityLoaderFactory} instances, and invoke the active factory/factories to actually
 * start loading vulnerabilities and exporting these to the target systems.
 * 
 * @author Ruud Senden
 *
 */
@SpringBootApplication(scanBasePackages= {"com.fortify.vulnexport", "com.fortify.util"})
public class FortifyVulnerabilityExporter {
	/**
	 * Start the application
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		PopulateContainerDirs.populateContainerDirs();
		DefaultExpressionHelper.set(FortifyVulnerabilityExporterExpressionHelper.get());
		new SpringApplicationBuilder(FortifyVulnerabilityExporter.class)
			.environment(new FortifyEnvironment())
			.build().run(args);
	}
}
