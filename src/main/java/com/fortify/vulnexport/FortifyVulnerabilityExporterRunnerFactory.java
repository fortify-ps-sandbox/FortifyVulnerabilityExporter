/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport;

import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.stereotype.Component;

import com.fortify.util.spring.boot.scheduler.ISchedulableRunner;
import com.fortify.util.spring.boot.scheduler.ISchedulableRunnerFactory;
import com.fortify.vulnexport.api.vuln.consumer.active.ActiveVulnerabilityConsumerFactory;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoader;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.api.vuln.loader.StandardVulnerabilityLoaderContext;
import com.fortify.vulnexport.api.vuln.loader.active.ActiveVulnerabilityLoaderFactory;

/**
 * This {@link ISchedulableRunnerFactory} implementation allows for running vulnerability exports
 * either once or on a schedule. For each run, it simply connects the auto-wired {@link ActiveVulnerabilityLoaderFactory}
 * and {@link ActiveVulnerabilityConsumerFactory} instances to load and consume vulnerability data. 
 * 
 * @author Ruud Senden
 *
 */
@Component
public class FortifyVulnerabilityExporterRunnerFactory implements ISchedulableRunnerFactory {
	@Autowired private Validator validator;
	@Autowired private ConfigurableEnvironment environment;
	@Autowired private FortifyVulnerabilityExporterRunnerConfig config;
	@Autowired private ActiveVulnerabilityLoaderFactory activeVulnerabilityLoaderFactory;
	@Autowired private ActiveVulnerabilityConsumerFactory activeVulnerabilityConsumerFactory;

	/**
	 * This {@link ISchedulableRunnerFactory} implementation is always enabled
	 */
	@Override
	public boolean isEnabled() {
		return true;
	}

	/**
	 * Get the cron schedule as defined our {@link FortifyVulnerabilityExporterRunnerConfig} configuration class
	 */
	@Override
	public String getCronSchedule() {
		return config.getCronSchedule();
	}

	/**
	 * Get the {@link ISchedulableRunner} instance used to perform a single export run, based on the
	 * {@link #runActiveVulnerabilityLoader()} method.
	 */
	@Override
	public ISchedulableRunner getRunner() {
		return this::runActiveVulnerabilityLoader;
	}
	
	/**
	 * <ul>
	 *  <li>Call {@link #createVulnerabilityLoaderContext()} to create an {@link IVulnerabilityLoaderContext} instance<li>
	 *  <li>Call {@link ActiveVulnerabilityLoaderFactory#createVulnerabilityLoader(IVulnerabilityLoaderContext)} to create an {@link IVulnerabilityLoader} instance</li>
	 *  <li>Call {@link IVulnerabilityLoader#run()} to start a single export run</li>
	 * </ul>
	 */
	public void runActiveVulnerabilityLoader() {
		IVulnerabilityLoaderContext loaderContext = createVulnerabilityLoaderContext();
		activeVulnerabilityLoaderFactory.createVulnerabilityLoader(loaderContext).run();
	}
	
	/**
	 * @return {@link StandardVulnerabilityLoaderContext} instance created using auto-wired
	 *         {@link Validator}, {@link ConfigurableEnvironment} and {@link ActiveVulnerabilityConsumerFactory}
	 */
	private final IVulnerabilityLoaderContext createVulnerabilityLoaderContext() {
		return new StandardVulnerabilityLoaderContext(environment, validator, activeVulnerabilityConsumerFactory);
	}
}
