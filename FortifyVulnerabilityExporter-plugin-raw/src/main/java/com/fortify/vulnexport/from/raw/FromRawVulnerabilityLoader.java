/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.from.raw;

import java.io.IOException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fortify.util.rest.json.JSONList;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.rest.json.JSONObjectMapperSupplier;
import com.fortify.vulnexport.api.vuln.StandardVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.StandardVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.spi.source.vuln.loader.AbstractVulnerabilityLoader;

public class FromRawVulnerabilityLoader extends AbstractVulnerabilityLoader {
	public static final String PLUGINNAME = FromRawVulnerabilityLoaderFactory.PLUGINNAME;
	private static final ObjectMapper MAPPER = JSONObjectMapperSupplier.getObjectMapper();
	private FromRawVulnerabilityLoaderConfig config;
	private IVulnerabilityLoaderContext loaderContext;

	public FromRawVulnerabilityLoader(FromRawVulnerabilityLoaderConfig config, IVulnerabilityLoaderContext loaderContext) {
		this.config = config;
		this.loaderContext = loaderContext;
	}

	@Override
	public void run() {
		IVulnerabilityConsumerContext consumerContext = new StandardVulnerabilityConsumerContext(PLUGINNAME, loaderContext);
		try ( IVulnerabilityConsumer consumer = loaderContext.createVulnerabilityConsumer(consumerContext) ) {
			JSONList vulns = MAPPER.readValue(config.getLocation().getURL(), JSONList.class); // TODO Add null check
			vulns.asValueType(JSONMap.class).stream()
				.forEach(StandardVulnerabilityAccessor.asJSONMapConsumer(consumerContext, consumer));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
