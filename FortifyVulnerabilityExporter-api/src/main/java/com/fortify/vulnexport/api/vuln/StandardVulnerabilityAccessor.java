/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln;

import java.util.LinkedHashMap;
import java.util.function.Consumer;

import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.rest.query.IRestConnectionQuery;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

/**
 * Standard implementation for {@link IVulnerabilityAccessor}.
 * @author Ruud Senden
 *
 */
@Data @EqualsAndHashCode(callSuper = true) @ToString(callSuper = true)
public class StandardVulnerabilityAccessor extends LinkedHashMap<String, JSONMap> implements IVulnerabilityAccessor {
	private static final long serialVersionUID = 1L;
	private final IVulnerabilityConsumerContext consumerContext;
	
	/**
	 * Constructor for configuring the {@link IVulnerabilityConsumerContext} instance and current vulnerability.
	 * @param consumerContext {@link IVulnerabilityConsumerContext} instance
	 * @param vuln Current vulnerability
	 */
	public StandardVulnerabilityAccessor(IVulnerabilityConsumerContext consumerContext, JSONMap vuln) {
		this.consumerContext = consumerContext;
		putAll(consumerContext.getContextObjects());
		put("vuln", vuln);
	}
	
	/**
	 * The lambda expression returned by this method can be used with the {@link IRestConnectionQuery#processAll(Consumer)}
	 * method; it will wrap each vulnerability in a new {@link StandardVulnerabilityAccessor} instance and then call the
	 * {@link IVulnerabilityConsumer#accept(IVulnerabilityAccessor)} method on the given {@link IVulnerabilityConsumer} instance.
	 * 
	 * @param consumerContext used for creating {@link StandardVulnerabilityAccessor} instances
	 * @param consumer used to consume {@link IVulnerabilityAccessor} instances
	 * @return {@link JSONMap} {@link Consumer}
	 */
	public static final Consumer<JSONMap> asJSONMapConsumer(IVulnerabilityConsumerContext consumerContext, IVulnerabilityConsumer consumer) {
		return vuln -> consumer.accept(new StandardVulnerabilityAccessor(consumerContext, vuln));
	}
	
	/**
	 * Return the current vulnerability as configured through the constructor
	 */
	@Override
	public JSONMap getVuln() {
		return get("vuln");
	}
}
