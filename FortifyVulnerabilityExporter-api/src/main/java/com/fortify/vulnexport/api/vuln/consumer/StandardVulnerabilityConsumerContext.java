/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln.consumer;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Stream;

import org.springframework.core.env.MutablePropertySources;
import org.springframework.core.env.PropertySource;

import com.fortify.util.config.loader.AbstractConfigLoader;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.vulnexport.api.config.ExportToConfig;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Standard implementation for {@link IVulnerabilityConsumerContext} that can be initialized through
 * its constructor.
 * 
 * @author Ruud Senden
 *
 */
@Data @EqualsAndHashCode(callSuper=true)
public class StandardVulnerabilityConsumerContext extends AbstractConfigLoader implements IVulnerabilityConsumerContext {
	private final String vulnerabilityLoaderPluginName;
	private final Map<String, JSONMap> contextObjects = new LinkedHashMap<>();
	
	public StandardVulnerabilityConsumerContext(String vulnerabilityLoaderPluginName, IVulnerabilityLoaderContext vulnerabilityLoaderContext) {
		super(vulnerabilityLoaderContext.getValidator(), vulnerabilityLoaderContext.getEnvironment());
		this.vulnerabilityLoaderPluginName = vulnerabilityLoaderPluginName;
	}

	public void addPropertySources(PropertySource<?>... propertySources) {
		MutablePropertySources mutablePropertySources = getEnvironment().getPropertySources();
		Stream.of(propertySources).forEach(mutablePropertySources::addFirst);
	}
		
	public void addContextObject(String name, JSONMap value) {
		addPropertySources(new JSONMapPropertySource(name, value));
		contextObjects.put(name, value);
	}
	
	public Map<String, JSONMap> getContextObjects() {
		return Collections.unmodifiableMap(contextObjects);
	}
	
	private static final class JSONMapPropertySource extends PropertySource<JSONMap> {
		private final String requiredPrefix;
		
		public JSONMapPropertySource(String name, JSONMap source) {
			this(name, name, source);
		}
		
		public JSONMapPropertySource(String name, String propertyParentName, JSONMap source) {
			super(name, source);
			this.requiredPrefix = propertyParentName==null ? null : propertyParentName+".";
		}

		@Override
		public Object getProperty(String propertyName) {
			Object result = null;
			if ( propertyName!=null && propertyName.startsWith(requiredPrefix) ) {
				String plainPropertyName = propertyName.replaceFirst("^"+requiredPrefix, "");
				result = getSource().getPath(plainPropertyName);
			}
			return result;
		}
	}

	@Override
	public ExportToConfig getExportToConfig() {
		return loadConfig("export", ExportToConfig.class);
	}
}
