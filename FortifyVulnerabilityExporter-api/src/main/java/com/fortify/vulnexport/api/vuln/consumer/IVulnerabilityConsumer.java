/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln.consumer;

import java.util.function.Consumer;

import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;

/**
 * This interface allows for consuming vulnerabilities from some source system.
 * Instances of this interface are created by {@link IVulnerabilityConsumerFactory}
 * instances. The factory will usually pass the {@link IVulnerabilityConsumerContext}
 * provided by the source system to the constructor of the {@link IVulnerabilityConsumer} 
 * implementation. The source system implementation will call the {@link #accept(IVulnerabilityAccessor)}
 * method for each individual vulnerability in a given context. Once all vulnerabilities in a 
 * given context have been processed, the {@link #close()} method will be called by the source
 * system implementation.
 * 
 * @author Ruud Senden
 *
 */
public interface IVulnerabilityConsumer extends Consumer<IVulnerabilityAccessor>, AutoCloseable {
	@Override
	public void close(); // Instances are not allowed to throw checked exceptions
}
