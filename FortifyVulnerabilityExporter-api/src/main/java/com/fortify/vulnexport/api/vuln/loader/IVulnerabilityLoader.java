/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln.loader;

import com.fortify.vulnexport.api.vuln.consumer.CompositeVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.StandardVulnerabilityConsumerContext;

/**
 * This interface is to be implemented by plugins that can load vulnerability data 
 * from some source system. Instances of this interfaces are created through a 
 * corresponding {@link IVulnerabilityLoaderFactory}. Implementations are responsible 
 * for actually loading vulnerability data from the source system, and invoking all 
 * active vulnerability consumers. Usually the {@link #run()} method would perform
 * the following steps:
 * <ol>
 *  <li>Open a connection to the source system</li>
 *  <li>Load contextual data (applications, releases, ...)</li>
 *  <li>For each context:
 *   <ol>
 *    <li>Create a corresponding {@link StandardVulnerabilityConsumerContext} instance (or other {@link IVulnerabilityConsumerContext} implementation)</li>
 *    <li>Use a try-with-resources block to:
 *     <ol>
 *      <li>Invoke the {@link IVulnerabilityLoaderContext#createVulnerabilityConsumer(IVulnerabilityConsumerContext)}
 *          method to create an {@link IVulnerabilityConsumer} instance for the current {@link StandardVulnerabilityConsumerContext}</li>
 *      <li>Check for <code>null</code> return value, indicating no active consumers are available, and handle
 *          appropriately (throw exception, log warning, ignore, ...)
 *      <li>Load the relevant vulnerabilities for the current context</li>
 *      <li>Invoke the {@link CompositeVulnerabilityConsumer#accept(com.fortify.util.rest.json.JSONMap)} method for each
 *          individual vulnerability</li>
 *     </ol>
 *    </li>
 *   </ol>
 *  </li>    
 * </ol>
 * 
 * The level of granularity to use for each context may depend on source system and configuration. For example,
 * for Fortify on Demand we could potentially have the following levels of granularity depending on configuration:
 * <ul>
 *  <li>Have all vulnerabilities processed by a single {@link CompositeVulnerabilityConsumer} instance</li>
 *  <li>Create a new {@link CompositeVulnerabilityConsumer} instance for each application</li>
 *  <li>Create a new {@link CompositeVulnerabilityConsumer} instance for each application release</li>
 * </ul> 
 *  
 * @author Ruud Senden
 *
 */
public interface IVulnerabilityLoader extends Runnable {}
