/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln.loader;

import javax.validation.Validator;

import org.springframework.core.env.ConfigurableEnvironment;

import com.fortify.util.config.loader.StandardConfigLoader;
import com.fortify.vulnexport.api.config.ExportFromConfig;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.active.ActiveVulnerabilityConsumerFactory;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Standard implementation for {@link IVulnerabilityLoaderContext} that can be initialized through
 * its constructor.
 * 
 * @author Ruud Senden
 *
 */
@Data @EqualsAndHashCode(callSuper=true)
public class StandardVulnerabilityLoaderContext extends StandardConfigLoader implements IVulnerabilityLoaderContext {
	private final ActiveVulnerabilityConsumerFactory activeVulnerabilityConsumerFactory;
	
	/**
	 * Constructor for configuring this {@link StandardVulnerabilityLoaderContext} instance
	 * @param environment {@link ConfigurableEnvironment} instance
	 * @param validator {@link Validator} instance used to perform validation
	 * @param activeVulnerabilityConsumerFactory {@link ActiveVulnerabilityConsumerFactory} instance to access the active vulnerability consumers
	 */
	public StandardVulnerabilityLoaderContext(ConfigurableEnvironment environment, Validator validator, ActiveVulnerabilityConsumerFactory activeVulnerabilityConsumerFactory) {
		super(environment, validator);
		this.activeVulnerabilityConsumerFactory = activeVulnerabilityConsumerFactory;
	}
	
	/**
	 * Create an {@link IVulnerabilityConsumer} instance for the given {@link IVulnerabilityConsumerContext}.
	 * @param vulnerabilityConsumerContext that can be used for creating the {@link IVulnerabilityConsumer} instance
	 * @return {@link IVulnerabilityConsumer} instance
	 */
	@Override
	public IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext) {
		return activeVulnerabilityConsumerFactory.createVulnerabilityConsumer(vulnerabilityConsumerContext);
	}
	
	/**
	 * Get the {@link ExportFromConfig} instance describing which plugin and configuration name is configured to be active
	 * @return {@link ExportFromConfig} instance
	 */
	@Override
	public ExportFromConfig getExportFromConfig() {
		return loadConfig("export", ExportFromConfig.class);
	}
}
