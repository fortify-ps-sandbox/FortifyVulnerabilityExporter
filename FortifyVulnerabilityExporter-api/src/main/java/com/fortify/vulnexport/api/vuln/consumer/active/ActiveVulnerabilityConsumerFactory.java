/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.api.vuln.consumer.active;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fortify.vulnexport.api.vuln.consumer.CompositeVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerFactory;

/**
 * Based on the auto-wired collection of available {@link IVulnerabilityConsumerFactory}, the 
 * {@link #createVulnerabilityConsumer(IVulnerabilityConsumerContext)} method provides access
 * to all active {@link IVulnerabilityConsumer} instances for a given {@link IVulnerabilityConsumerContext},
 * embedded in a {@link CompositeVulnerabilityConsumer} instance.
 * 
 * Note that this class itself doesn't implement the {@link IVulnerabilityConsumerFactory} interface,
 * otherwise the injection framework could potentially try to auto-wire this instance to its own collection
 * of available factories.
 * 
 * @author Ruud Senden
 *
 */
@Component
public final class ActiveVulnerabilityConsumerFactory {
	@Autowired private Collection<IVulnerabilityConsumerFactory> availableVulnerabilityConsumerFactories;

	public IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext) {
		List<IVulnerabilityConsumer> activeVulnerabilityLoaders = availableVulnerabilityConsumerFactories.stream()
				.map(f->f.createVulnerabilityConsumer(vulnerabilityConsumerContext))
				.filter(Objects::nonNull)
				.collect(Collectors.toList());
		return activeVulnerabilityLoaders.isEmpty() ? null : new CompositeVulnerabilityConsumer(activeVulnerabilityLoaders);
	}
}
