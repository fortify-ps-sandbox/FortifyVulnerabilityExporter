/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.spring.environment;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolver;
import org.springframework.boot.context.properties.source.ConfigurationPropertySources;
import org.springframework.core.env.PropertySource;
import org.springframework.core.env.StandardEnvironment;

/**
 * This extension of {@link StandardEnvironment} serves the following purposes:
 * <ul>
 *  <li>Add support for GitHub Actions INPUT_* environment variables by stripping the INPUT_ prefix</li>
 *  <li>Provide access to a {@link Binder} that takes into account the currently active profiles</li>
 * </ul>
 * 
 * @author Ruud Senden
 *
 */
public class FortifyEnvironment extends StandardEnvironment {
	@Override
	public Map<String, Object> getSystemEnvironment() {
		Map<String, Object> systemEnv = super.getSystemEnvironment();
		Map<String, Object> result = systemEnv;
		if ( systemEnv.containsKey("GITHUB_ACTIONS") ) {
			result = new HashMap<>(systemEnv); 
			result.putAll(systemEnv.entrySet().stream()
				.filter(e->e.getKey().startsWith("INPUT_"))
				.collect(Collectors.toMap(e->e.getKey().replaceFirst("^INPUT_",""), e->e.getValue())));
		}
		return result;
	}
	
	public Binder getBinder() {
		PropertySourcesPlaceholdersResolver resolver = new PropertySourcesPlaceholdersResolver(this);
		return new Binder(ConfigurationPropertySources.from(getActivePropertySources()), resolver);
	}
	
	protected List<PropertySource<?>> getActivePropertySources() {
		return super.getPropertySources().stream()
			.filter(this::isActivePropertySource)
			.collect(Collectors.toList());
	}
	
	// TODO Why do we need to filter property sources; why doesn't Spring do this?
	protected boolean isActivePropertySource(PropertySource<?> propertySource) {
		Object property = propertySource.getProperty("spring.config.activate.on-profile");
		if ( property!=null && property instanceof String ) {
			List<String> activateOnProfiles = Arrays.asList(((String)property).split(",[ ]*"));
			boolean result = doGetActiveProfiles().stream().anyMatch(activateOnProfiles::contains);
			return result;
		}
		return true;
	}
}
