/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.spring.expression;

import java.util.Map;

/**
 * This interface represents a {@link Map} containing property names and expressions, 
 * adding methods for evaluating the expressions contained in this map, and for determining 
 * whether a given property should be included in any evaluation results. 
 * 
 * Concrete implementations of this interface are commonly used for transforming data,
 * for example by evaluating a set of expressions on some JSON input object.
 * 
 * @author Ruud Senden
 *
 */
public interface IExpressionMap extends Map<String,String> {
	/**
	 * Evaluate the given expression on the given input, returning the given return type.
	 * @param <V> Return type
	 * @param input for evaluating the given expression
	 * @param expression to be evaluated on the given input
	 * @param returnType of the expression; conversion will be applied if needed
	 * @return expression evaluation result
	 */
	public <V> V evaluateExpression(Object input, String expression, Class<V> returnType);
	
	/**
	 * Based on the given input, determine whether the given propertyName should be included 
	 * in the results. 
	 * @param propertyName to be checked
	 * @param input for which to check whether the key should be included 
	 * @return true if the key should be included, false otherwise
	 */
	public boolean isIncluded(String propertyName, Object input);
}
