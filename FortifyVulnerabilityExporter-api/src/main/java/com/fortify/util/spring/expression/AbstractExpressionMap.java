/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.spring.expression;

import java.util.LinkedHashMap;

import org.apache.commons.lang.StringUtils;

import com.fortify.util.spring.expression.helper.DefaultExpressionHelper;

/**
 * Abstract implementation for {@link IExpressionMap}. Actual evaluation of expressions is left to
 * one of the subclasses {@link SimpleExpressionMap} or {@link TemplateExpressionMap}, depending on the
 * type of expressions contained in the current map. This abstract class provides generic support for 
 * evaluating whether properties should be included in evaluation results. 
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractExpressionMap extends LinkedHashMap<String, String> implements IExpressionMap {
	private static final long serialVersionUID = 1L;
	private static final String PRP_IS_INCLUDED = "__includeIf__";
	
	/**
	 * This method returns false if:
	 * <ul>
	 *  <li>The given propertyName ends with <code>__includeIf__</code></li>
	 *  <li>A key named <code>[propertyName]__includeIf__</code> exists in the map, and the corresponding expression evaluates to false</li>
	 *  <li>Any of the parent property names is not included (based on the same criteria as above)</li>
	 * <ul>
	 * 
	 */
	@Override
	public boolean isIncluded(String propertyName, Object input) {
		return !propertyName.endsWith(PRP_IS_INCLUDED)
			&& isIncludedByExpr(propertyName, input)
			&& isParentIncluded(propertyName, input);
	}

	/**
	 * Check if the parent tree for the given propertyName is included
	 * @param propertyName for which to check whether the parent tree is included
	 * @param input on which to evaluate the parent include-if expressions
	 * @return true if the parent is included, false otherwise
	 */
	private boolean isParentIncluded(String propertyName, Object input) {
		String parentPropertyName = getParentPropertyName(propertyName);
		return parentPropertyName==null ? true : isIncluded(parentPropertyName, input);
	}

	/** 
	 * @param propertyName for which to get the parent property name
	 * @return parent property name for the given property name
	 */
	private String getParentPropertyName(String propertyName) {
		int idx = propertyName.lastIndexOf('.');
		return idx==-1 ? null : propertyName.substring(0, idx);
	}

	/**
	 * For the given propertyName, check whether a corresponding <code>[propertyName]__includeIf__</code>
	 * exists. If not, or if the value is blank, true is returned. Otherwise, the corresponding
	 * expression is evaluated on the given input, and the expression result is returned.
	 * @param propertyName for which to check whether it should be included
	 * @param input used for evaluating expressions
	 * @return true if the given propertyName is included based on corresponding <code>[propertyName]__includeIf__</code> expression
	 */
	private boolean isIncludedByExpr(String propertyName, Object input) {
		String isIncludedExpr = get(propertyName+"."+PRP_IS_INCLUDED);
		return StringUtils.isBlank(isIncludedExpr) 
				? true
				: DefaultExpressionHelper.get().evaluateSimpleExpression(input, isIncludedExpr, Boolean.class);
	}
}
