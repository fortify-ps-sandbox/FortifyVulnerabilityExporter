/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.spring.expression;

import java.util.LinkedHashMap;

import org.apache.commons.lang.StringUtils;

import com.fortify.util.spring.expression.helper.DefaultExpressionHelper;

public abstract class AbstractExpressionMap extends LinkedHashMap<String, String> implements IExpressionMap {
	private static final long serialVersionUID = 1L;
	private static final String PRP_IS_INCLUDED = "__includeIf__";
	
	@Override
	public boolean isIncluded(String key, Object input) {
		return !key.endsWith(PRP_IS_INCLUDED)
			&& isIncludedByExpr(key, input)
			&& isParentIncluded(key, input);
	}

	private boolean isParentIncluded(String key, Object input) {
		String parentKey = getParentKey(key);
		return parentKey==null ? true : isIncluded(parentKey, input);
	}

	private String getParentKey(String key) {
		int idx = key.lastIndexOf('.');
		return idx==-1 ? null : key.substring(0, idx);
	}

	private boolean isIncludedByExpr(String key, Object input) {
		String isIncludedExpr = get(key+"."+PRP_IS_INCLUDED);
		return StringUtils.isBlank(isIncludedExpr) 
				? true
				: DefaultExpressionHelper.get().evaluateSimpleExpression(input, isIncludedExpr, Boolean.class);
	}
}
