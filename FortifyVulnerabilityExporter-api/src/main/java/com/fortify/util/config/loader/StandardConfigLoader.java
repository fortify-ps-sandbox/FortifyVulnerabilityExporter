/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.config.loader;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Validator;

import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.core.env.Environment;
import org.springframework.validation.annotation.Validated;

import com.fortify.util.spring.environment.FortifyEnvironment;

/**
 * Utility class for loading configuration class instances from the {@link Environment}
 * provided in the constructor. 
 * 
 * TODO Review logic for determining whether property exists despite Spring Binder returning null
 * TODO Add check for unknown properties?
 * 
 * @author Ruud Senden
 *
 */
public class StandardConfigLoader {
	private final Validator validator;
	
	/**
	 * Constructor to set the validator to use for binding configuration classes
	 * @param env
	 * @param validator
	 */
	public StandardConfigLoader(Validator validator) {
		this.validator = validator;
	}
	
	public <C> C loadConfig(FortifyEnvironment env, String propertyName, Class<C> returnType) {
		C config = getPropertyOrNull(env, propertyName, returnType);
		validateConfig(config);
		return config;
	}

	private <C> void validateConfig(C config) {
		if ( config!=null && config.getClass().isAnnotationPresent(Validated.class) ) {
			Set<ConstraintViolation<C>> violations = validator.validate(config);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}
		}
	}

	/**
	 * Try to bind the given property name/tree to a new instance of the given
	 * return type. This method follows standard Spring {@link Binder} behavior;
	 * if the environment contains the given property name but the property tree 
	 * doesn't contain any of the object properties, this method will return null.
	 * This method may throw an exception if there is an error binding any of the 
	 * properties in the property tree. 
	 * @param <T>
	 * @param env
	 * @param propertyName
	 * @param returnType
	 * @return
	 */
	private <T> T getPropertyOrNull(FortifyEnvironment env, String propertyName, Class<T> returnType) {
		return env.getBinder().bind(propertyName, returnType).orElse(null);
	}
}
