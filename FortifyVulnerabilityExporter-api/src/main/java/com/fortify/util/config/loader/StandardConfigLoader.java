/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.config.loader;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Validator;

import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.validation.annotation.Validated;

import com.fortify.util.spring.environment.FortifyEnvironment;
import com.fortify.vulnexport.api.vuln.consumer.StandardVulnerabilityConsumerContext;

import lombok.Data;

/**
 * This {@link IConfigLoader} implementation uses a child environment created from the configured
 * {@link ConfigurableEnvironment} to load configuration data. Configuration data will be validated
 * using the configured {@link Validator} (if the configuration data class has been annotated
 * with the {@link Validated} annotation). This class also implements the {@link IEnvironmentSupplier}
 * and {@link IValidatorSupplier} interfaces to provide access to the child environment and validator
 * respectively.
 * 
 * @author Ruud Senden
 *
 */
@Data
public class StandardConfigLoader implements IConfigLoader, IEnvironmentSupplier, IValidatorSupplier {
	private final FortifyEnvironment environment;
	private final Validator validator;
	
	/**
	 * Initialize this {@link StandardConfigLoader}
	 * @param environment to be used to load configuration data
	 * @param validator to be used to validate configuration data
	 */
	public StandardConfigLoader(ConfigurableEnvironment environment, Validator validator) {
		this.environment = createChildEnvironment(environment);
		this.validator = validator;
	}
	
	/**
	 * Create a child {@link FortifyEnvironment} for the given {@link ConfigurableEnvironment}. We create a
	 * child environment for two reasons:
	 * <ul>
	 *  <li>Have access to {@link FortifyEnvironment#getBinder()} (for use in {@link #getPropertyOrNull(String, Class)})
	 *      even if the given {@link ConfigurableEnvironment} is not an instance of {@link FortifyEnvironment}</li>
	 *  <li>Allow the child environment to be changed without affecting the parent environment. For example,  
	 *      {@link StandardVulnerabilityConsumerContext#addContextObject(String, com.fortify.util.rest.json.JSONMap)}
	 *      can be used to add context objects to the consumer context environment without affecting the parent loader 
	 *      context environment.</li>
	 * </ul>
	 * @param parentEnvironment based on which to create a child environment
	 * @return FortifyEnvironment instance based on given parent environment
	 */
	private static final FortifyEnvironment createChildEnvironment(ConfigurableEnvironment parentEnvironment) {
		FortifyEnvironment environment = new FortifyEnvironment();
		environment.merge(parentEnvironment);
		return environment;
	}

	/**
	 * Load a configuration object of the given type from the given property
	 */
	@Override
	public <C> C loadConfig(String propertyName, Class<C> returnType) {
		return validateConfig(getPropertyOrNull(propertyName, returnType));
	}

	/**
	 * Validate the given config object if it has the {@link Validated} annotation,
	 * using the configured {@link Validator}.
	 * @param <C> Type of the configuration data object to be validated
	 * @param config data object to be validated
	 * @return Original config data object
	 * @throws ConstraintViolationException if one or more validation constraints were violated 
	 */
	private <C> C validateConfig(C config) {
		if ( config!=null && config.getClass().isAnnotationPresent(Validated.class) ) {
			Set<ConstraintViolation<C>> violations = validator.validate(config);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}
		}
		return config;
	}

	/**
	 * Try to bind the given property name/tree to a new instance of the given
	 * return type. This method follows standard Spring {@link Binder} behavior;
	 * if the environment contains the given property name but the property tree 
	 * doesn't contain any of the object properties, this method will return null.
	 * This method may throw an exception if there is an error binding any of the 
	 * properties in the property tree. 
	 * @param <T> Type of the configuration class to be bound to a configuration property tree
	 * @param propertyName to be bound to an instance of the given configuration type
	 * @param returnType Type of the configuration class to be bound to a configuration property tree
	 * @return Configuration instance
	 */
	private <T> T getPropertyOrNull(String propertyName, Class<T> returnType) {
		return environment.getBinder().bind(propertyName, returnType).orElse(null);
	}
}
