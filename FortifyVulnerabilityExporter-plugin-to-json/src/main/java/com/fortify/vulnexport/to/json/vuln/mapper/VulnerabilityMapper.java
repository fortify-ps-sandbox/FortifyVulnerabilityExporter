/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.to.json.vuln.mapper;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.spring.expression.ExpressionMapToJSONMapEvaluator;
import com.fortify.util.spring.expression.helper.DefaultExpressionHelper;
import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;

public class VulnerabilityMapper implements Consumer<IVulnerabilityAccessor>, Supplier<Object> {
	private final VulnerabilityMapperConfig config;
	private final ExpressionMapToJSONMapEvaluator jsonMapEvaluator;
	private Map<String, Object> namedObjects = new LinkedHashMap<>(); // TODO Add option for disk-backed map
	private List<Object> objectsArray = new ArrayList<>(); // TODO Add option for disk-backed
	
	public VulnerabilityMapper(VulnerabilityMapperConfig config) {
		this.config = config;
		this.jsonMapEvaluator = config.getFields()==null ? null : new ExpressionMapToJSONMapEvaluator(config.getFields());
	}
	
	@Override
	public void accept(IVulnerabilityAccessor vulnAccessor) {
		Object mappedVuln = mapVulnerability(vulnAccessor);
		if ( mappedVuln instanceof JSONMap ) {
			// The mapped vulnerability may still contain on-demand objects that 
			// would cause Jackson errors when trying to serialize to JSON, so 
			// we resolve on-demand values
			((JSONMap)mappedVuln).resolveOnDemandValues(); 
		}
		if ( config.getPropertyName()==null ) {
			objectsArray.add(mappedVuln);
		} else {
			String objectName = DefaultExpressionHelper.get().evaluateExpression(vulnAccessor, config.getPropertyName(), String.class); 
			namedObjects.put(objectName, mappedVuln);
		}
	}

	private Object mapVulnerability(IVulnerabilityAccessor vulnAccessor) {
		if ( config.getValue() != null ) {
			return DefaultExpressionHelper.get().evaluateExpression(vulnAccessor, config.getValue(), Object.class);
		} else {
			return jsonMapEvaluator.evaluate(vulnAccessor);
		}
	}

	@Override
	public Object get() {
		if ( config.getPropertyName()==null ) {
			return objectsArray;
		} else {
			return namedObjects;
		}
	}
}
