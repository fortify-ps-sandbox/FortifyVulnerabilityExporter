/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.to.json.vuln.formatter;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.spring.expression.ExpressionMapToJSONMapEvaluator;
import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.to.json.vuln.mapper.VulnerabilityMapper;
import com.fortify.vulnexport.to.json.vuln.mapper.VulnerabilityMapperConfig;

public class JsonFormatter implements Consumer<IVulnerabilityAccessor> {
	private static final ObjectMapper MAPPER = new ObjectMapper();
	private final JsonFormatterConfig formatterConfig;
	private final Map<String, VulnerabilityMapper> vulnerabilityMappers;
	private final Map<String, JSONMap> contextObjects;
	
	public JsonFormatter(IVulnerabilityConsumerContext context, JsonFormatterConfig formatterConfig) {
		this.formatterConfig = formatterConfig;
		this.vulnerabilityMappers = createVulnerabilityMappers(formatterConfig.getVulnerabilityMappers());
		this.contextObjects = context.getContextObjects();
	}

	private static Map<String, VulnerabilityMapper> createVulnerabilityMappers(Map<String, VulnerabilityMapperConfig> vulnerabilityMapperConfigs) {
		return vulnerabilityMapperConfigs.entrySet().parallelStream()
		        .collect(Collectors.toMap(Map.Entry::getKey, entry->new VulnerabilityMapper(entry.getValue())));
	}

	@Override
	public void accept(IVulnerabilityAccessor vulnAccessor) {
		vulnerabilityMappers.values().forEach(mapper->mapper.accept(vulnAccessor));
	}
	
	public void write(JsonGenerator out) throws Exception {
		ExpressionMapToJSONMapEvaluator jsonMapEvaluator = new ExpressionMapToJSONMapEvaluator(formatterConfig.getFields());
		JSONMap output = jsonMapEvaluator.evaluate(createEvaluationInput());
		MAPPER.writeValue(out, output);
	}

	private Map<String, Object> createEvaluationInput() {
		Map<String, Object> result = new LinkedHashMap<>(contextObjects);
		result.put("vulnerabilityMappers", vulnerabilityMappers);
		return result;
	}
}
