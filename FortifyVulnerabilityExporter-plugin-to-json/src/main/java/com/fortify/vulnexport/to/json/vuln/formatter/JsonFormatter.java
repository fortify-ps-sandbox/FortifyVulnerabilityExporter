/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.to.json.vuln.formatter;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import org.apache.commons.collections.MapUtils;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.spring.expression.ExpressionMapToJSONMapEvaluator;
import com.fortify.util.spring.expression.TemplateExpressionMap;
import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.to.json.vuln.mapper.VulnerabilityMapper;
import com.fortify.vulnexport.to.json.vuln.mapper.VulnerabilityMapperConfig;

/**
 * This class is responsible for transforming vulnerability data into a configurable JSON output format.
 * 
 * @author Ruud Senden
 *
 */
public class JsonFormatter implements Consumer<IVulnerabilityAccessor> {
	private static final ObjectMapper MAPPER = new ObjectMapper();
	private final JsonFormatterConfig formatterConfig;
	private final Map<String, VulnerabilityMapper> vulnerabilityMappers;
	private final Map<String, JSONMap> contextObjects;
	
	/**
	 * @param context {@link IVulnerabilityConsumerContext} instance
	 * @param formatterConfig {@link JsonFormatterConfig} instance specifying configuration options for this {@link JsonFormatter}
	 */
	public JsonFormatter(IVulnerabilityConsumerContext context, JsonFormatterConfig formatterConfig) {
		this.formatterConfig = formatterConfig;
		this.vulnerabilityMappers = createVulnerabilityMappers(formatterConfig.getVulnerabilityMappers());
		this.contextObjects = context.getContextObjects();
	}

	/**
	 * Given a {@link Map} of {@link VulnerabilityMapperConfig} instances, this method generates a {@link Map}
	 * of configured {@link VulnerabilityMapper} instances.
	 * 
	 * @param vulnerabilityMapperConfigs {@link Map} of {@link VulnerabilityMapperConfig} instances
	 * @return {@link Map} of {@link VulnerabilityMapper} instances
	 */
	private static Map<String, VulnerabilityMapper> createVulnerabilityMappers(Map<String, VulnerabilityMapperConfig> vulnerabilityMapperConfigs) {
		return vulnerabilityMapperConfigs.entrySet().parallelStream()
		        .collect(Collectors.toMap(Map.Entry::getKey, entry->new VulnerabilityMapper(entry.getValue())));
	}

	/**
	 * Accept the given {@link IVulnerabilityAccessor}, passing it to each of the configured {@link VulnerabilityMapper} instances
	 */
	@Override
	public void accept(IVulnerabilityAccessor vulnAccessor) {
		vulnerabilityMappers.values().forEach(mapper->mapper.accept(vulnAccessor));
	}
	
	/**
	 * Write the JSON output data to the given {@link JsonGenerator} by invoking one of the following methods:
	 * <ul>
	 *  <li>{@link #write(JsonGenerator, TemplateExpressionMap)} if output fields have been configured</li>
	 *  <li>{@link #write(JsonGenerator, VulnerabilityMapper)} if no output fields have been configured 
	 *      and exactly one vulnerabilityMapper has been configured</li>
	 * </ul>
	 * @param out {@link JsonGenerator} instance where JSON output will be written
	 * @throws IllegalStateException if no output fields have been configured and not exactly one vulnerabilityMapper has been configured
	 * @throws Exception if any exception occurs while generating or writing the output data 
	 */
	public void write(JsonGenerator out) throws IllegalStateException, Exception {
		TemplateExpressionMap fields = formatterConfig.getFields();
		if ( MapUtils.isNotEmpty(fields) ) {
			write(out, fields);
		} else {
			if ( size(vulnerabilityMappers)!=1 ) {
				throw new IllegalStateException("Either output fields or exactly 1 vulnerabilityMapper must be configured");
			} else {
				write(out, vulnerabilityMappers.values().iterator().next());
			}
		}
	}
	
	/**
	 * Write a JSON object generated from the given {@link TemplateExpressionMap}:
	 * <ul>
	 *  <li>Create a new {@link ExpressionMapToJSONMapEvaluator} instance based on the configured top-level fields</li>
	 *  <li>Generate evaluation input using the {@link #createEvaluationInput()} method, 
	 *      containing {@link VulnerabilityMapper} instances and context objects provided by the source plugin</li>
	 *  <li>Use the {@link ExpressionMapToJSONMapEvaluator} instance together with a generic {@link ObjectMapper} 
	 *      instance to generate the JSON output</li>
	 *  <li>Write the JSON output to the output stream</li>
	 * <ul> 
	 * @param out {@link JsonGenerator} instance where JSON output will be written
	 * @param fields {@link TemplateExpressionMap} instance used to generate the output fields
	 * @throws Exception if any exception occurs while generating or writing the output data
	 */
	private void write(JsonGenerator out, TemplateExpressionMap fields) throws Exception {
		ExpressionMapToJSONMapEvaluator jsonMapEvaluator = new ExpressionMapToJSONMapEvaluator(fields);
		JSONMap output = jsonMapEvaluator.evaluate(createEvaluationInput());
		MAPPER.writeValue(out, output);
	}
	
	/**
	 * Write the output generated by the given {@link VulnerabilityMapper}.
	 * @param out {@link JsonGenerator} instance where JSON output will be written
	 * @param vulnerabilityMapper from which to retrieve the JSON output to be written
	 * @throws Exception if any exception occurs while generating or writing the output data
	 */
	private void write(JsonGenerator out, VulnerabilityMapper vulnerabilityMapper) throws Exception {
		Object output = vulnerabilityMapper.get();
		MAPPER.writeValue(out, output);
	}

	/**
	 * Create evaluation input, containing context objects provided by the source plugin, and 
	 * the {@link VulnerabilityMapper} instances.
	 * @return {@link Map} containing evaluation input
	 */
	private Map<String, Object> createEvaluationInput() {
		Map<String, Object> result = new LinkedHashMap<>(contextObjects);
		result.put("vulnerabilityMappers", vulnerabilityMappers);
		return result;
	}
	
	private static final int size(Map<?, ?> map) {
		return map==null ? 0 : map.size();
	}
}
