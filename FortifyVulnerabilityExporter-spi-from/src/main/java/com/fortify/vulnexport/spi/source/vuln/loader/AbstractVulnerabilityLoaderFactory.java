/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.source.vuln.loader;

import java.util.function.BiFunction;

import com.fortify.vulnexport.api.config.ExportFromConfig;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoader;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderFactory;

import lombok.Data;

@Data
public abstract class AbstractVulnerabilityLoaderFactory<C> implements IVulnerabilityLoaderFactory {
	private final String pluginName;
	private final Class<C> configClass;
	private final BiFunction<C, IVulnerabilityLoaderContext, IVulnerabilityLoader> vulnerabilityLoaderSupplier;
	
	public AbstractVulnerabilityLoaderFactory(String pluginName, Class<C> configClass,
			BiFunction<C, IVulnerabilityLoaderContext, IVulnerabilityLoader> vulnerabilityLoaderSupplier) {
		this.pluginName = pluginName;
		this.configClass = configClass;
		this.vulnerabilityLoaderSupplier = vulnerabilityLoaderSupplier;
	}

	@Override
	public final IVulnerabilityLoader createVulnerabilityLoader(IVulnerabilityLoaderContext vulnerabilityLoaderContext) {
		C config = createConfig(vulnerabilityLoaderContext);
		return config==null ? null : vulnerabilityLoaderSupplier.apply(config, vulnerabilityLoaderContext);
	}

	protected C createConfig(IVulnerabilityLoaderContext vulnerabilityLoaderContext) {
		ExportFromConfig exportFromConfig = vulnerabilityLoaderContext.getExportFromConfig();
		String from = exportFromConfig==null ? null : exportFromConfig.getFrom();
		boolean hasPluginPrefix = from!=null && from.startsWith(pluginName);
		return hasPluginPrefix ? vulnerabilityLoaderContext.loadConfig(from, configClass) : null;
	}
}
