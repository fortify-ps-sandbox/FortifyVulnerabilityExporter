/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.source.vuln.loader;

import org.springframework.stereotype.Component;

import com.fortify.vulnexport.api.config.ExportFromConfig;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoader;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderFactory;

import lombok.Data;

/**
 * Common base class for {@link IVulnerabilityLoaderFactory} implementations. Concrete implementations should:
 * <ul>
 *  <li>Be annotated with {@link Component} in order to be automatically loaded by Spring
 *  <li>Implement a no-args constructor that provides the required information to the constructor in this class</li>
 *  <li>Implement the {@link #createVulnerabilityLoader(IVulnerabilityLoaderContext, Object)} method</li>
 * </ul>
 * 
 * @author Ruud Senden
 *
 * @param <C> Configuration data class used to configure the {@link IVulnerabilityLoader} instances created by this factory
 */
@Data
public abstract class AbstractVulnerabilityLoaderFactory<C> implements IVulnerabilityLoaderFactory {
	private final String pluginName;
	private final Class<C> configClass;
	
	/**
	 * @param pluginName Name of the plugin (corresponding to the source system where vulnerability data is loaded from, like 'ssc' or 'fod')
	 * @param configClass Configuration data class used to configure the {@link IVulnerabilityLoader} 
	 *        instances created by the {@link #createVulnerabilityLoader(IVulnerabilityLoaderContext, Object)} method
	 */
	public AbstractVulnerabilityLoaderFactory(String pluginName, Class<C> configClass) {
		this.pluginName = pluginName;
		this.configClass = configClass;
	}

	/**
	 * Create an {@link IVulnerabilityLoader} instance by first loading the appropriate configuration
	 * using the {@link #createConfig(IVulnerabilityLoaderContext)} method, then calling the 
	 * {@link #createVulnerabilityLoader(IVulnerabilityLoaderContext, Object)} method with this 
	 * configuration to actually create the {@link IVulnerabilityLoader} instance.  
	 * If the configuration instance is null, this method will return null to indicate that this vulnerability 
	 * loader is not enabled. 
	 */
	@Override
	public final IVulnerabilityLoader createVulnerabilityLoader(IVulnerabilityLoaderContext vulnerabilityLoaderContext) {
		C config = createConfig(vulnerabilityLoaderContext);
		return config==null ? null : createVulnerabilityLoader(vulnerabilityLoaderContext, config);
	}

	/**
	 * Concrete implementations will need to implement this method to create an {@link IVulnerabilityLoader} instance
	 * based on the given {@link IVulnerabilityLoaderContext} and configuration.
	 * @param vulnerabilityLoaderContext {@link IVulnerabilityLoaderContext} instance
	 * @param config Configuration to be used for the {@link IVulnerabilityLoader} instance
	 * @return {@link IVulnerabilityLoader} instance
	 */
	protected abstract IVulnerabilityLoader createVulnerabilityLoader(IVulnerabilityLoaderContext vulnerabilityLoaderContext, C config);

	/**
	 * If the current plugin name is listed in the <code>export.from</code> property, meaning the plugin is
	 * enabled, this method will load and return the plugin configuration. If the plugin is not enabled,
	 * this method will return <code>null</code>.
	 * @param vulnerabilityLoaderContext {@link IVulnerabilityLoaderContext} instance
	 * @return Configuration instance if plugin is enabled, null if plugin is disabled
	 */
	protected C createConfig(IVulnerabilityLoaderContext vulnerabilityLoaderContext) {
		ExportFromConfig exportFromConfig = vulnerabilityLoaderContext.getExportFromConfig();
		String from = exportFromConfig==null ? null : exportFromConfig.getFrom();
		boolean hasPluginPrefix = from!=null && from.startsWith(pluginName);
		return hasPluginPrefix ? vulnerabilityLoaderContext.loadConfig(from, configClass) : null;
	}
}
