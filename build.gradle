/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/

plugins {
	id "org.springframework.boot" version "2.4.3"
	id 'com.github.jk1.dependency-license-report' version '1.16'
	id "org.kordamp.gradle.markdown" version "2.2.0"
	id 'com.google.cloud.tools.jib' version '2.8.0'
	id "io.freefair.lombok" version "5.3.0"
	id 'eclipse'
}

// Apply 'java' plugin for root project, 'java-library' plugin for sub-projects
apply plugin: 'java'
subprojects {
	apply plugin: 'java-library'
	jar {
		archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
		from {
			configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}
}

// Set up source compatibility and JUnit for all projects 
allprojects {
	sourceCompatibility = 1.8
	test {
		useJUnitPlatform()
	}
	eclipse {
	    classpath {
	        plusConfigurations += [ configurations.compileOnly ]
	   	}
	}
}

// Set up Gradle helpers, group and version for all projects
allprojects {
	ext {
		gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/1.4"
	}

	apply from: "${gradleHelpersLocation}/repo-helper.gradle"
	group = 'com.fortify.export.vulnerabilities'
}

// Set up dependency management for all projects
allprojects {
	dependencies {
		implementation platform('com.fortify.client.api:fortify-client-api-bom:5.7')
		implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
		
		constraints {
			implementation 'javax.validation:validation-api:2.0.0.Final'
			implementation 'org.hibernate:hibernate-validator:6.1.7.Final'
			implementation 'org.hibernate:hibernate-validator-annotation-processor:6.1.7.Final'
			implementation 'org.jsoup:jsoup:1.13.1'
			implementation 'com.google.code.findbugs:jsr305:3.0.2'
		}
	}
}

// Include all dependencies used by main app and dependencies provided to plugin implementations 
dependencies {
	implementation project(':FortifyVulnerabilityExporter-api')
	implementation project(':FortifyVulnerabilityExporter-spi-from')
	implementation project(':FortifyVulnerabilityExporter-spi-to')
	implementation 'com.fortify.client.api:common-log'
	implementation 'com.fortify.client.api:common-spring'
	implementation 'com.fortify.client.api:common-rest'
	implementation 'commons-lang:commons-lang'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'javax.validation:validation-api'
	implementation 'org.hibernate:hibernate-validator'
	implementation 'org.hibernate:hibernate-validator-annotation-processor'
	implementation 'org.jsoup:jsoup'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

bootJar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
	manifest {
		attributes(
			'Main-Class':             'org.springframework.boot.loader.PropertiesLauncher',
			'Implementation-Title':   "${project.name}",
			'Implementation-Version': "${project.version}"
        )
	}
}

ext {
	thirdPartyBaseName = "${rootProject.name}"
}
apply from: "${gradleHelpersLocation}/thirdparty-helper.gradle"
apply from: "${gradleHelpersLocation}/fortify-helper.gradle"
apply from: "${gradleHelpersLocation}/readme2html.gradle"

configurations.all {
    // Don't cache modules that may change (i.e. snapshots)
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task copyPlugins(type: Copy) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "${buildDir}/${libsDirName}/plugins"
}
build.finalizedBy(copyPlugins)


task dist(type: Zip) {
	dependsOn 'build', 'readme2html'
	archiveFileName = "${rootProject.name}.zip"
	destinationDirectory = file("$buildDir/dist")
	from "${buildDir}/html"
	from("${projectDir}") {
		include "config/**/*"
		include "LICENSE.TXT"
	}
	from("${buildDir}/${libsDirName}") {
		include "${rootProject.name}.jar"
		include "plugins/*"
	}
}

task copyExtraJibFiles(type: Copy) {
    dependsOn 'copyPlugins'
	into "${buildDir}/jibExtraFiles"
	into("config") {
		from "${projectDir}/config"
	}
	into("app/libs") {
	    from "${buildDir}/${libsDirName}/plugins"
	}
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':jib')) {
    	if (!project.hasProperty('jibImageTag')) {
        	throw new GradleException("Property jibImageTag must be set when executing jib task")
        }
    	def jibExtraImageTagsString = project.properties["jibExtraImageTags"]?.trim()
    	if ( jibExtraImageTagsString ) {
    		jib.to.tags = jibExtraImageTagsString.split(',') as List
    	}
    } 
}

jib {
	to {
		image = "fortifydocker/fortify-vulnerability-exporter:${project.properties['jibImageTag']}"
		auth {
			username = System.getenv('DOCKER_HUB_USER') ?: ''
			password = System.getenv('DOCKER_HUB_TOKEN') ?: ''
		}
		extraDirectories {
			paths = ['src/main/jib', "${buildDir}/jibExtraFiles"]
			permissions = [
				// Read/write/execute for all, to allow container to run as any user
				'/config': '777', 
				'/work': '777'
	        ]
		}
		container {
			jvmFlags = ['-DpopulateContainerDirs=true']
			volumes = ['/config', '/export']
			environment = [EXPORT_DIR:'/export']
		}
	}
}
tasks.jib.dependsOn 'copyExtraJibFiles', 'copyPlugins'
tasks.jibBuildTar.dependsOn copyExtraJibFiles