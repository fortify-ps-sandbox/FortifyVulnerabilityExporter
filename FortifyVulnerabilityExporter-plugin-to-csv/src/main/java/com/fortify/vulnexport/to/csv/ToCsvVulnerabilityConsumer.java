/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.to.csv;

import com.fasterxml.jackson.databind.SequenceWriter;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.fortify.util.spring.expression.ExpressionMapToMapEvaluator;
import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;
import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.AbstractToFileVulnerabilityConsumer;
import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.FileOutputConfig;
import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.stream.MultiOutputStreamFactory;

/**
 * This {@link AbstractToFileVulnerabilityConsumer} implementation allows for exporting vulnerability data to CSV files.
 * 
 * @author Ruud Senden
 */
public class ToCsvVulnerabilityConsumer extends AbstractToFileVulnerabilityConsumer<SequenceWriter, FileOutputConfig> {
	private final ToCsvVulnerabilityConsumerConfig config;
	private final ExpressionMapToMapEvaluator fieldsEvaluator;
	
	/**
	 * @param config {@link ToCsvVulnerabilityConsumerConfig} instance specifying configuration options for this consumer
	 */
	public ToCsvVulnerabilityConsumer(ToCsvVulnerabilityConsumerConfig config) {
		super(config.getOutput());
		this.config = config;
		this.fieldsEvaluator = new ExpressionMapToMapEvaluator(config.getFields());
	}

	/**
	 * Write vulnerability data from the given {@link IVulnerabilityAccessor} instance
	 * to the {@link SequenceWriter} returned by the {@link #out()} method, using the
	 * CSV fields generated by the configured {@link ExpressionMapToMapEvaluator} instance.
	 * @param vulnAccessor {@link IVulnerabilityAccessor} instance
	 * @throws Exception if there is any error mapping the vulnerability data to CSV columns or while writing the CSV data
	 */
	public void _accept(IVulnerabilityAccessor vulnAccessor) throws Exception {
		out().write(fieldsEvaluator.evaluate(vulnAccessor));
	}
	
	/**
	 * Create the {@link SequenceWriter} instance used to write CSV data to the output
	 * stream. Based on the {@link ToCsvVulnerabilityConsumerConfig} passed to the
	 * constructor, this method configures the CSV columns to be written to the CSV
	 * file, and configures whether the CSV header should be written or not.
	 */
	@Override
	protected SequenceWriter createOut() throws Exception {
		CsvSchema.Builder schemaBuilder = CsvSchema.builder();
	    for (String column : config.getFields().keySet() ) {
            schemaBuilder.addColumn(column);
        }
	    CsvSchema schema = schemaBuilder.build();
	    if ( config.getOutput().isHeader() ) {
	    	schema = schema.withHeader();
	    }
		return new CsvMapper().writer(schema).writeValues(MultiOutputStreamFactory.createOutputStream(getOutputConfig()));
	}

	/**
	 * Close the given {@link SequenceWriter}
	 */
	@Override
	protected void closeOut(SequenceWriter out) throws Exception {
		out.close();
	}
}
