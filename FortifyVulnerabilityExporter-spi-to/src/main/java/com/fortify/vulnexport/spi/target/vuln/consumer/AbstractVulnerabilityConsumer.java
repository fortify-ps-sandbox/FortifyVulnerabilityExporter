/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer;

import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;

/**
 * Common base class for {@link IVulnerabilityConsumer} implementations. This class
 * provides common functionality like exception handling for {@link IVulnerabilityConsumer} 
 * implementations.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractVulnerabilityConsumer implements IVulnerabilityConsumer {
	/**
	 * Implementation for {@link IVulnerabilityConsumer#accept(IVulnerabilityAccessor)}
	 * that simply calls the {@link #_accept(IVulnerabilityAccessor)} method to do the 
	 * actual work, calling the {@link #handleAcceptException(Exception)} method if any
	 * exception is thrown by the {@link #_accept(IVulnerabilityAccessor)} method. 
	 */
	@Override
	public final void accept(IVulnerabilityAccessor vulnAccessor) {
		try {
			_accept(vulnAccessor);
		} catch (Exception e) {
			handleAcceptException(e);
		}
	}
	
	/**
	 * Subclasses will need to implement this method to actually process the
	 * vulnerability available through the given {@link IVulnerabilityAccessor}. 
	 * @param vulnAccessor used to access the vulnerability and context data
	 * @throws Exception Implementations may throw any exception, which will be handled
	 *         by the {@link #handleAcceptException(Exception)}. 
	 */
	protected abstract void _accept(IVulnerabilityAccessor vulnAccessor) throws Exception;
	
	/**
	 * Default implementation for handling exceptions thrown by the {@link #_accept(IVulnerabilityAccessor)} method
	 * @param e {@link Exception} to be handled
	 */
	protected void handleAcceptException(Exception e) {
		throw new RuntimeException("Error processing vulnerability", e);
	}
	
	/**
	 * Implementation for {@link IVulnerabilityConsumer#close()} that simply calls 
	 * the {@link #_close()} method to do the actual work, calling the 
	 * {@link #handleCloseException(Exception)} method if any exception is thrown 
	 * by the {@link #_close()} method. 
	 */
	@Override
	public final void close() {
		try {
			_close();
		} catch (Exception e) {
			handleCloseException(e);
		}
	}
	
	/**
	 * Subclasses will need to implement this method to actually close any resources. 
	 * @throws Exception Implementations may throw any exception, which will be handled
	 *         by the {@link #handleCloseException(Exception)}. 
	 */
	protected abstract void _close() throws Exception;
	
	/**
	 * Default implementation for handling exceptions thrown by the {@link #_close()} method
	 * @param e {@link Exception} to be handled
	 */
	protected void handleCloseException(Exception e) {
		throw new RuntimeException("Error closing vulnerability consumer", e);
	}
	
}
