/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer.to.file.stream;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.FileOutputConfig;

public class MultiOutputStreamFactory {
	public static final OutputStream createOutputStream(FileOutputConfig config) {
		return new MultiOutputStream(config);
	}
	
	public static final PrintStream createPrintStream(FileOutputConfig config) {
		return new PrintStream(createOutputStream(config));
	}
	
	private static final class MultiOutputStream extends OutputStream {
		private final OutputStream stdout;
		private final OutputStream stderr;
		private final OutputStream fos;
		
		public MultiOutputStream(FileOutputConfig config) {
			try {
				this.stdout = config.isStdout() ? System.out : null;
				this.stderr = config.isStderr() ? System.err : null;
				this.fos   = config.getFile()!=null ? createFileOutputStream(config) : null;
			} catch ( FileNotFoundException fnfe ) {
				throw new IllegalArgumentException("File "+config.getFile()+" cannot be opened", fnfe);
			}
		}

		private FileOutputStream createFileOutputStream(FileOutputConfig config) throws FileNotFoundException {
			File file = config.getFile();
			File dir = file.getParentFile();
			if ( config.isMkdir() && !dir.exists() ) {
				dir.mkdirs();
			}
			return new FileOutputStream(file);
		}

		@Override
		public void write(int b) throws IOException {
			write(this.stdout, b);
			write(this.stderr, b);
			write(this.fos, b);
		}

		private void write(OutputStream os, int b) throws IOException {
			if ( os!=null ) { os.write(b); }
		}
		
		@Override
		public void flush() throws IOException {
			flush(this.stdout);
			flush(this.stderr);
			flush(this.fos);
		}

		private void flush(OutputStream os) throws IOException {
			if ( os!=null ) { os.flush(); }
		}
		
		@Override
		public void close() throws IOException {
			flush(this.stdout); // We don't want to close stdout, so just flush
			flush(this.stderr); // We don't want to close stderr, so just flush
			close(this.fos);
		}

		private void close(OutputStream os) throws IOException {
			if ( os!=null ) { os.close(); }
		}
	}
}
