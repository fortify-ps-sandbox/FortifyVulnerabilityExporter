/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer;

import java.util.function.Predicate;

import com.fortify.vulnexport.api.filter.FilterConfig;
import com.fortify.vulnexport.api.filter.FilterPredicate;
import com.fortify.vulnexport.api.vuln.IVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;

/**
 * This {@link AbstractVulnerabilityConsumer} implementation wraps another {@link IVulnerabilityConsumer},
 * pre-filtering its input based on the configured {@link FilterConfig}.
 * 
 * @author Ruud Senden
 */
class FilteringConsumer extends AbstractVulnerabilityConsumer {
	private final Predicate<Object> predicate;
	private final IVulnerabilityConsumer target;
	
	/**
	 * @param config {@link FilterConfig} instance defining filtering criteria
	 * @param target {@link IVulnerabilityConsumer} to be wrapped and for which the input data should be filtered
	 */
	public FilteringConsumer(FilterConfig config, IVulnerabilityConsumer target) {
		this.predicate = new FilterPredicate(config);
		this.target = target;
	}
	
	/**
	 * This method calls the {@link IVulnerabilityConsumer#accept(IVulnerabilityAccessor)} on the target
	 * {@link IVulnerabilityConsumer} instance if the given {@link IVulnerabilityAccessor} matches the
	 * filtering criteria in the {@link FilterConfig} configured through the constructor.
	 */
	@Override
	public void _accept(IVulnerabilityAccessor vulnAccessor) {
		if ( predicate.test(vulnAccessor) ) {
			target.accept(vulnAccessor);
		}
	}
	
	/**
	 * This method calls the {@link IVulnerabilityConsumer#close()} method on the target 
	 * {@link IVulnerabilityConsumer} instance.
	 */
	@Override
	protected void _close() throws Exception {
		target.close();
	}

}
