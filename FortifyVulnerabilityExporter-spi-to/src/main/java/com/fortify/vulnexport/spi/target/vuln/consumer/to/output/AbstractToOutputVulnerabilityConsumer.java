/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer.to.output;

import java.io.Closeable;

import com.fortify.vulnexport.spi.target.vuln.consumer.AbstractVulnerabilityConsumer;

/**
 * Generic base class for writing vulnerabilities to some output, providing callback methods
 * around opening and closing the output, and providing exception handling.
 * 
 * @author Ruud Senden
 *
 * @param <O> Output type
 */
public abstract class AbstractToOutputVulnerabilityConsumer<O> extends AbstractVulnerabilityConsumer {
	private O out;
	private boolean closed = false;
	
	/**
	 * Get the output. If the output has already been closed, an exception
	 * will be thrown. If the output hasn't yet been opened yet, the
	 * {@link #beforeOpen()}, {@link #createOut()} and {@link #afterOpen()}
	 * methods will be called, in this order.
	 * @return Output object
	 * @throws IllegalStateException if output has already been closed
	 * @throws Exception if any exception occurred while opening the output 
	 */
	protected final O out() throws IllegalStateException, Exception {
		if ( closed ) {
			throw new IllegalStateException("Output has already been closed");
		}
		if ( this.out==null ) {
			beforeOpen();
			this.out = createOut();
			afterOpen();
		}
		return out;
	}

	/**
	 * Close the output. Before and after closing the output, the 
	 * {@link #beforeClose()} and {@link #afterClose()} methods
	 * will be invoked. If the output is currently open, the
	 * {@link #closeOut(Object)} method will be called to actually
	 * close the output.
	 * @throws Exception if any of the invoked methods throw an exception
	 */
	@Override
	public final void _close() throws Exception {
		beforeClose();
		if ( isOpen() ) {
			closeOut(out);
			closed = true;
		}
		afterClose();
	}

	/**
	 * @return true if output is currently open, false otherwise
	 */
	protected final boolean isOpen() {
		return this.out!=null;
	}

	/**
	 * This method is to be implemented by subclasses to create the actual output
	 * @return Output object
	 * @throws Exception may be thrown if there is any error while opening the output
	 */
	protected abstract O createOut() throws Exception;
	
	/**
	 * By default, if the output is an instance of {@link Closeable}, this method
	 * will call the {@link Closeable#close()} method. Subclasses can override
	 * this method if necessary.
	 * @param out Output to be closed
	 * @throws Exception may be thrown if there is any error while closing the output
	 */
	protected void closeOut(O out) throws Exception {
		if ( out instanceof Closeable ) {
			((Closeable)out).close();
		}
	}
	
	/**
	 * This method can be overridden by subclasses if they need to do any work 
	 * before the output is being opened.
	 */
	protected void beforeOpen() throws Exception {}
	
	/**
	 * This method can be overridden by subclasses if they need to do any work 
	 * right after the output has been opened.
	 */
	protected void afterOpen() throws Exception {}
	
	/**
	 * This method can be overridden by subclasses if they need to do any work 
	 * before the output is being closed. This method is always called when 
	 * the vulnerability consumer is being closed, independent of whether the
	 * output has actually been opened.
	 */
	protected void beforeClose() throws Exception {}

	/**
	 * This method can be overridden by subclasses if they need to do any work 
	 * after the output has been closed. This method is always called when 
	 * the vulnerability consumer is being closed, independent of whether the
	 * output has actually been opened.
	 */
	protected void afterClose() throws Exception {}
}
