/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer.to.json;

import java.io.IOException;
import java.io.PrintStream;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.AbstractToFileVulnerabilityConsumer;
import com.fortify.vulnexport.spi.target.vuln.consumer.to.file.stream.MultiOutputStreamFactory;

/**
 * This abstract class extends {@link AbstractToFileVulnerabilityConsumer}, using a
 * {@link JsonGenerator} as the output object.
 * 
 * @author Ruud Senden
 */
public abstract class AbstractToJsonVulnerabilityConsumer extends AbstractToFileVulnerabilityConsumer<JsonGenerator, JsonOutputConfig> {
	/**
	 * @param outputConfig used to configure this {@link AbstractToJsonVulnerabilityConsumer}
	 */
	public AbstractToJsonVulnerabilityConsumer(JsonOutputConfig outputConfig) {
		super(outputConfig);
	}
	
	/**
	 * Create a {@link JsonGenerator} based on the configured {@link JsonOutputConfig},
	 * by calling the {@link #createJsonFactory()} and {@link #createJsonGenerator(JsonFactory)}
	 * methods.
	 */
	@Override
	protected JsonGenerator createOut() throws Exception {
		return createJsonGenerator(createJsonFactory());
	}

	/**
	 * Create a {@link JsonGenerator} instance using the given {@link JsonFactory}
	 * and based on the configured {@link JsonOutputConfig}.
	 * 
	 * @param factory {@link JsonFactory} instance used to create the {@link JsonGenerator} instance
	 * @return {@link JsonGenerator} instance
	 * @throws IOException if there is any error opening the JSON output stream
	 */
	private JsonGenerator createJsonGenerator(JsonFactory factory) throws IOException {
		JsonGenerator generator = factory.createGenerator(createJsonOutputStream(), getOutputConfig().getEncoding());
		if ( getOutputConfig().isPretty() ) {
			generator.setPrettyPrinter(new DefaultPrettyPrinter());
		}
		return generator;
	}

	/**
	 * Create a new {@link JsonFactory} instance, configured to automatically close
	 * the target stream if the {@link JsonGenerator} is closed.
	 * @return {@link JsonFactory} instance 
	 */
	protected JsonFactory createJsonFactory() {
		JsonFactory factory = new JsonFactory();
		factory.enable(Feature.AUTO_CLOSE_TARGET);
		return factory;
	}

	/**
	 * Create the stream where JSON data will be written to, using
	 * {@link MultiOutputStreamFactory#createPrintStream(com.fortify.vulnexport.spi.target.vuln.consumer.to.file.FileOutputConfig)}
	 * @return PrintStream where JSON data will be written to
	 */
	protected PrintStream createJsonOutputStream() {
		return MultiOutputStreamFactory.createPrintStream(getOutputConfig());
	}
}
