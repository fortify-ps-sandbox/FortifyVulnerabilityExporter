/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer;

import java.util.List;
import java.util.stream.Collectors;

import com.fortify.vulnexport.api.config.ExportToConfig;
import com.fortify.vulnexport.api.filter.FilterConfig;
import com.fortify.vulnexport.api.filter.IConfigWithFilter;
import com.fortify.vulnexport.api.vuln.consumer.CompositeVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerFactory;

/**
 * Common base class for {@link IVulnerabilityTargetConsumerFactory} implementations.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractVulnerabilityConsumerFactory<C> implements IVulnerabilityConsumerFactory {
	private final String pluginName;
	private final Class<C> configClass;
	
	public AbstractVulnerabilityConsumerFactory(String pluginName, Class<C> configClass) {
		this.pluginName = pluginName;
		this.configClass = configClass;
	}

	@Override
	public final IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext) {
		ExportToConfig exportToConfig = vulnerabilityConsumerContext.getExportToConfig();
		List<String> toList = exportToConfig==null ? null : exportToConfig.getTo();
		List<IVulnerabilityConsumer> vulnerabilityConsumers = toList==null 
				? null
				: toList.parallelStream()
					.filter(to->to.startsWith(pluginName))
					.map(to->_loadConfig(vulnerabilityConsumerContext, to))
					.map(config->_createVulnerabilityConsumer(vulnerabilityConsumerContext, config))
					.collect(Collectors.toList());
		return vulnerabilityConsumers==null || vulnerabilityConsumers.isEmpty() 
				? null 
				: new CompositeVulnerabilityConsumer(vulnerabilityConsumers);
	}
	
	protected abstract IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext, C config);

	private C _loadConfig(IVulnerabilityConsumerContext vulnerabilityConsumerContext, String propertyName) {
		C result = vulnerabilityConsumerContext.loadConfig(propertyName, configClass);
		return result!=null ? result : getDefaultConfig(propertyName);
	}
	
	private IVulnerabilityConsumer _createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext, C config) {
		IVulnerabilityConsumer consumer = createVulnerabilityConsumer(vulnerabilityConsumerContext, config);
		if ( config instanceof IConfigWithFilter ) {
			FilterConfig filterConfig = ((IConfigWithFilter)config).getFilter();
			if ( filterConfig != null ) {
				consumer = new FilteringConsumer(filterConfig, consumer);
			}
		}
		return consumer;
	}

	protected C getDefaultConfig(String propertyName) {
		throw new IllegalStateException(configClass.getSimpleName()+" cannot be loaded from property "+propertyName);
	}
}
