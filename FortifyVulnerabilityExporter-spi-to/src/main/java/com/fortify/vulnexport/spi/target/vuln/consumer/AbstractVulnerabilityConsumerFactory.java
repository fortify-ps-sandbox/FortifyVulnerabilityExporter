/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.spi.target.vuln.consumer;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Component;

import com.fortify.vulnexport.api.config.ExportToConfig;
import com.fortify.vulnexport.api.filter.FilterConfig;
import com.fortify.vulnexport.api.filter.IConfigWithFilter;
import com.fortify.vulnexport.api.vuln.consumer.CompositeVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumerFactory;

/**
 * Common base class for {@link IVulnerabilityConsumerFactory} implementations. Concrete implementations should:
 * <ul>
 *  <li>Be annotated with {@link Component} in order to be automatically loaded by Spring
 *  <li>Implement a no-args constructor that provides the required information to the constructor in this class</li>
 *  <li>Implement the {@link #createVulnerabilityConsumer(IVulnerabilityConsumerContext, Object)} method</li>
 * </ul>
 * 
 * @author Ruud Senden
 *
 * @param <C> Configuration data class used to configure the {@link IVulnerabilityConsumer} instances created by this factory
 */
public abstract class AbstractVulnerabilityConsumerFactory<C> implements IVulnerabilityConsumerFactory {
	private final String pluginName;
	private final Class<C> configClass;
	
	/**
	 * @param pluginName Name of the plugin that is consuming the data
	 * @param configClass Configuration data class used to configure the {@link IVulnerabilityConsumer} 
	 *        instances created by the {@link #createVulnerabilityConsumer(IVulnerabilityConsumerContext, Object)} method
	 */
	public AbstractVulnerabilityConsumerFactory(String pluginName, Class<C> configClass) {
		this.pluginName = pluginName;
		this.configClass = configClass;
	}

	/**
	 * Create an {@link IVulnerabilityConsumer} instance, using the following approach:
	 * <ul>
	 *  <li>Get all enabled plugin configurations from the <code>export.to</code> configuration property</li>
	 *  <li>For each enabled plugin configuration:
	 *   <ul>
	 *    <li>Select only configurations for which the plugin name matches the plugin name 
	 *        configured through the constructor</li>
	 *    <li>Load the corresponding configuration data using the 
	 *        {@link #loadConfig(IVulnerabilityConsumerContext, String)} method</li>
	 *    <li>Create an (optionally filtering) {@link IVulnerabilityConsumer} instance with the 
	 *        configuration loaded in the previous step, by calling the 
	 *        {@link #createFilteringVulnerabilityConsumer(IVulnerabilityConsumerContext, Object)} method</li>
	 *    <li>Collect all {@link IVulnerabilityConsumer} instances in a list
	 *   </ul> 
	 *  </li>
	 *  <li>Return a {@link CompositeVulnerabilityConsumer} instance containing all collected
	 *      {@link IVulnerabilityConsumer} instances, or null if there were no enabled configurations
	 *      for this plugin</li> 
	 * </ul>
	 */
	@Override
	public final IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext) {
		ExportToConfig exportToConfig = vulnerabilityConsumerContext.getExportToConfig();
		List<String> toList = exportToConfig==null ? null : exportToConfig.getTo();
		List<IVulnerabilityConsumer> vulnerabilityConsumers = toList==null 
				? null
				: toList.parallelStream()
					.filter(to->to.startsWith(pluginName))
					.map(to->loadConfig(vulnerabilityConsumerContext, to))
					.map(config->createFilteringVulnerabilityConsumer(vulnerabilityConsumerContext, config))
					.collect(Collectors.toList());
		return vulnerabilityConsumers==null || vulnerabilityConsumers.isEmpty() 
				? null 
				: new CompositeVulnerabilityConsumer(vulnerabilityConsumers);
	}
	
	/**
	 * This method wraps the {@link IVulnerabilityConsumer} returned by the {@link #createVulnerabilityConsumer(IVulnerabilityConsumerContext, Object)}
	 * method in a {@link FilteringConsumer} if filtering is enabled.
	 * @param vulnerabilityConsumerContext {@link IVulnerabilityConsumerContext} instance
	 * @param config Configuration to be used for the {@link IVulnerabilityConsumer} instance
	 * @return {@link IVulnerabilityConsumer} returned by the {@link #createVulnerabilityConsumer(IVulnerabilityConsumerContext, Object)},
	 *         optionally wrapped inside a {@link FilteringConsumer}.
	 */
	private IVulnerabilityConsumer createFilteringVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext, C config) {
		IVulnerabilityConsumer consumer = createVulnerabilityConsumer(vulnerabilityConsumerContext, config);
		if ( config instanceof IConfigWithFilter ) {
			FilterConfig filterConfig = ((IConfigWithFilter)config).getFilter();
			if ( filterConfig != null ) {
				consumer = new FilteringConsumer(filterConfig, consumer);
			}
		}
		return consumer;
	}
	
	/**
	 * Load the configuration data from the given property name, using the given {@link IVulnerabilityConsumerContext}
	 * @param vulnerabilityConsumerContext {@link IVulnerabilityConsumerContext} instance
	 * @param propertyName from which to load configuration data for this consumer instance 
	 * @return Configuration instance
	 * @throws IllegalStateException if no configuration is available for the given property name
	 */
	protected C loadConfig(IVulnerabilityConsumerContext vulnerabilityConsumerContext, String propertyName) {
		C result = vulnerabilityConsumerContext.loadConfig(propertyName, configClass);
		if ( result==null ) {
			throw new IllegalStateException(configClass.getSimpleName()+" cannot be loaded from property "+propertyName);
		}
		return result;
	}
	
	/**
	 * Concrete implementations will need to implement this method to create an {@link IVulnerabilityConsumer} instance
	 * based on the given {@link IVulnerabilityConsumerContext} and configuration.
	 * @param vulnerabilityConsumerContext {@link IVulnerabilityConsumerContext} instance
	 * @param config Configuration to be used for the {@link IVulnerabilityConsumer} instance
	 * @return {@link IVulnerabilityConsumer} instance
	 */
	protected abstract IVulnerabilityConsumer createVulnerabilityConsumer(IVulnerabilityConsumerContext vulnerabilityConsumerContext, C config);
}
