/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport.from.fod;

import java.util.List;
import java.util.stream.Stream;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fortify.client.fod.api.FoDReleaseAPI;
import com.fortify.client.fod.api.FoDVulnerabilityAPI;
import com.fortify.client.fod.api.query.builder.FoDReleaseVulnerabilitiesQueryBuilder;
import com.fortify.client.fod.api.query.builder.FoDReleasesQueryBuilder;
import com.fortify.client.fod.connection.FoDAuthenticatingRestConnection;
import com.fortify.util.rest.json.JSONList;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.rest.json.ondemand.AbstractJSONMapOnDemandLoader;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithOnDemandProperty;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithOnDemandSpEL;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithValue;
import com.fortify.util.rest.json.preprocessor.filter.AbstractJSONMapFilter.MatchMode;
import com.fortify.util.rest.json.preprocessor.filter.JSONMapFilterRegEx;
import com.fortify.util.rest.query.PagingData;
import com.fortify.vulnexport.api.filter.QueryBuilderFilterHelper;
import com.fortify.vulnexport.api.vuln.StandardVulnerabilityAccessor;
import com.fortify.vulnexport.api.vuln.consumer.IVulnerabilityConsumer;
import com.fortify.vulnexport.api.vuln.consumer.StandardVulnerabilityConsumerContext;
import com.fortify.vulnexport.api.vuln.loader.IVulnerabilityLoaderContext;
import com.fortify.vulnexport.from.fod.FromFoDVulnerabilityLoaderConfig.FromFoDVulnerabilityLoaderReleaseConfig;
import com.fortify.vulnexport.from.fod.FromFoDVulnerabilityLoaderConfig.FromFoDVulnerabilityLoaderVulnerabilityConfig;
import com.fortify.vulnexport.spi.source.vuln.loader.AbstractVulnerabilityLoader;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class FromFoDVulnerabilityLoader extends AbstractVulnerabilityLoader {
	public static final String PLUGINNAME = FromFoDVulnerabilityLoaderFactory.PLUGINNAME;
	private static final Logger LOG = LoggerFactory.getLogger(FromFoDVulnerabilityLoader.class);
	private final FromFoDVulnerabilityLoaderConfig config;
	private final IVulnerabilityLoaderContext loaderContext;

	@Override
	public void run() {
		try ( FoDAuthenticatingRestConnection conn = new FoDAuthenticatingRestConnection(config) ) {
			new _FromFoDVulnerabilityLoader(config, loaderContext, conn).run();
		}
	}
	
	@RequiredArgsConstructor
	private static final class _FromFoDVulnerabilityLoader {
		private final FromFoDVulnerabilityLoaderConfig config;
		private final IVulnerabilityLoaderContext loaderContext;
		private final FoDAuthenticatingRestConnection conn;
		
		public void run() {
			FoDReleasesQueryBuilder qb = conn.api(FoDReleaseAPI.class).queryReleases();
			updateReleasesQueryBuilder(qb);
			qb.build().processAll(this::processVulnerabilities);
		}
		
		private void updateReleasesQueryBuilder(FoDReleasesQueryBuilder qb) {
			qb.preProcessor(new JSONMapEnrichWithOnDemandSpEL("applicationAndReleaseName", "applicationName+':'+releaseName", String.class, true));
			FromFoDVulnerabilityLoaderReleaseConfig releaseConfig = config.getRelease();
			if ( releaseConfig!=null ) {
				qb.releaseId(true, releaseConfig.getId());
				qb.applicationAndOrReleaseName(true, releaseConfig.getName());
				if ( StringUtils.isNotBlank(releaseConfig.getRegex()) ) {
					qb.preProcessor(new JSONMapFilterRegEx(MatchMode.INCLUDE, "applicationAndReleaseName", releaseConfig.getRegex()));
				}
				qb.paramOrderBy(true, releaseConfig.getOrderBy());
				if ( releaseConfig.getEmbed()!=null ) {
					if ( releaseConfig.getEmbed()!=null ) {
						Stream.of(releaseConfig.getEmbed()).forEach(qb::embed);
					}
				}
				QueryBuilderFilterHelper.addFilter(qb, releaseConfig.getFilter());
			}
		}
		
		private void updateReleaseVulnerabilitiesQueryBuilder(FoDReleaseVulnerabilitiesQueryBuilder qb, JSONMap release) {
			qb.preProcessor(new JSONMapEnrichWithValue("release", release));
			qb.pagePostProcessor(this::logPagingData);
			FromFoDVulnerabilityLoaderVulnerabilityConfig vulnConfig = config.getVulnerability();
			if ( vulnConfig!=null ) {
				qb.paramIncludeFixed(true, vulnConfig.isIncludeAll() || vulnConfig.isIncludeFixed());
				qb.paramIncludeSuppressed(true, vulnConfig.isIncludeAll() || vulnConfig.isIncludeSuppressed());
				qb.paramFilterAnd(true, vulnConfig.getFilterParam());
				qb.paramOrderBy(true, vulnConfig.getOrderBy());
				if ( vulnConfig.getEmbed()!=null ) {
					Stream.of(vulnConfig.getEmbed()).forEach(qb::embed);
				}
				qb.preProcessor(new JSONMapEnrichWithOnDemandProperty("complianceItems", new ComplianceItemsOnDemandLoader()));
				QueryBuilderFilterHelper.addFilter(qb, vulnConfig.getFilter());
			}
		}
		
		private final void logPagingData(PagingData pagingData, JSONList jsonList) {
			LOG.info(String.format("Processed %d of %d vulnerabilities", 
				pagingData.getProcessedTotalBeforeFilters(), pagingData.getTotalAvailable()));
		}
		
		private void processVulnerabilities(JSONMap release) {
			LOG.info("Processing Application Release: {}", release.get("applicationAndReleaseName", String.class));
			LOG.trace("Release JSON: {}", release);
			StandardVulnerabilityConsumerContext consumerContext = new StandardVulnerabilityConsumerContext(PLUGINNAME, loaderContext);
			consumerContext.addContextObject("release", release);
			try ( IVulnerabilityConsumer consumer = loaderContext.createVulnerabilityConsumer(consumerContext) ) {
				if ( checkConsumer(release, consumer) ) {
					FoDReleaseVulnerabilitiesQueryBuilder qb = conn.api(FoDVulnerabilityAPI.class)
						.queryVulnerabilities(release.get("releaseId", String.class));
					updateReleaseVulnerabilitiesQueryBuilder(qb, release);
					qb.build().processAll(StandardVulnerabilityAccessor.asJSONMapConsumer(consumerContext, consumer));
				}
			}
		}

		private boolean checkConsumer(JSONMap release, IVulnerabilityConsumer consumer) {
			if ( consumer==null ) {
				LOG.info("No plugin available to process FoD vulnerabilities for application release {}", release.get("applicationAndReleaseName"));
				return false;
			}
			return true;
		}
	}
	
	private static class ComplianceItemsOnDemandLoader extends AbstractJSONMapOnDemandLoader {
		private static final long serialVersionUID = 1L;
		public ComplianceItemsOnDemandLoader() {
			super(true);
		}
		
		@Override
		public Object getOnDemand(String propertyName, JSONMap parent) {
			return getComplianceItems(parent);
		}
		
		private static final JSONList getComplianceItems(JSONMap vuln) {
			JSONList result = new JSONList();
			List<JSONMap> complianceCategories = vuln.getOrCreateJSONMap("details").getOrCreateJSONList("complianceCategories").asValueType(JSONMap.class);
			complianceCategories.forEach(c->result.addAll(getComplianceItemsForCategory(c)));
			return result;
		}
		
		private static final JSONList getComplianceItemsForCategory(JSONMap complianceCategoryWithItems) {
			JSONList result = new JSONList();
			String categoryName = complianceCategoryWithItems.get("categoryName", String.class);
			List<String> complianceRules = complianceCategoryWithItems.getOrCreateJSONList("complianceItems").getValues("complianceRule", String.class);
			complianceRules.forEach(complianceRule->result.add(createComplianceItem(categoryName, complianceRule)));
			return result;
		}

		private static final JSONMap createComplianceItem(String categoryName, String complianceRule) {
			JSONMap result = new JSONMap();
			result.put("categoryName", categoryName);
			result.put("complianceRule", complianceRule);
			return result;
		}
	}
}
